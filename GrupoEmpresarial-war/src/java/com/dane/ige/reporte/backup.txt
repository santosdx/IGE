package com.dane.ige.reporte;

import com.dane.ige.modelo.connection.ConexionBd;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import org.apache.log4j.Logger;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

/**
 *
 * @author SRojasM
 */
@ManagedBean(name = "MbReporteGrupoEmpresa")
@SessionScoped
public class ReporteGrupoEmpresa {

    final static Logger LOGGER = Logger.getLogger(ReporteGrupoEmpresa.class);

    private StreamedContent contenido;
    private boolean reporteGenerado;

    public ReporteGrupoEmpresa() {
    }
/*
    @PostConstruct
    public void init() {
        setReporteGenerado(false);
        LOGGER.info("init");
    }*/
/*
    @Deprecated
    public void generarReporte() {
        String dir = "C:\\Users\\srojasm\\Documents\\Irepor-Reportes\\";
        String nombreReporte = "lista-usuarios.jrxml";
        ConexionBd connection = null;
        JasperReport reporteJasper = null;
        JasperPrint print = null;

        try {
            connection = new ConexionBd(ConexionBd.getJndi_Sid_Desarrollo());

            String reportName = "REPORTE-GRUPO-EMPRESA";
            Map<String, Object> parameters = new HashMap<String, Object>();

            // compiles jrxml
            reporteJasper = JasperCompileManager.compileReport(dir + nombreReporte);
            // fills compiled report with parameters and a connection
            print = JasperFillManager.fillReport(reporteJasper, null, connection.getConexion());
            // exports report to pdf
            JRExporter exporter = new JRPdfExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
            File temp = File.createTempFile(reportName, ".pdf");
            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new FileOutputStream(temp)); // your output goes here
            exporter.exportReport();
            LOGGER.info(temp.getAbsolutePath());

            StreamedContent strmContent = new DefaultStreamedContent(new FileInputStream(temp), "application/pdf");
            //setContenido(strmContent);

        } catch (JRException e) {
            LOGGER.warn(e);
            throw new RuntimeException("It's not possible to generate the pdf report.", e);
        } catch (FileNotFoundException e) {
            LOGGER.warn(e);
            throw new RuntimeException("It's not possible to generate the pdf report.", e);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(ReporteGrupoEmpresa.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // it's your responsibility to close the connection, don't forget it!
            if (connection != null) {
                try {
                    connection.closeConexionBd();
                } catch (Exception e) {
                }
            }
        }
        LOGGER.info("Fin");
    }
*/
    public void generarReportePdf(String urlArchivo, String nombreArchivo) {
        if (!isReporteGenerado()) {
            LOGGER.info(urlArchivo);
            LOGGER.info(nombreArchivo);
            ConexionBd connection = null;
            JasperReport reporteJasper = null;
            JasperPrint print = null;

            try {
                connection = new ConexionBd(ConexionBd.getJndi_Sid_Desarrollo());
                String reportName = "REPORTE";
                File temp = File.createTempFile(reportName, ".pdf");

                reporteJasper = JasperCompileManager.compileReport(urlArchivo + nombreArchivo);
                print = JasperFillManager.fillReport(reporteJasper, null, connection.getConexion());
                JRExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new FileOutputStream(temp)); // your output goes here
                exporter.exportReport();

                setContenido(new DefaultStreamedContent(new FileInputStream(temp), "application/pdf"));
                temp.deleteOnExit();
            } catch (JRException e) {
                LOGGER.warn(e);
                throw new RuntimeException("It's not possible to generate the pdf report.", e);
            } catch (FileNotFoundException e) {
                LOGGER.warn(e);
                throw new RuntimeException("It's not possible to generate the pdf report.", e);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(ReporteGrupoEmpresa.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (connection != null) {
                    try {
                        connection.closeConexionBd();
                    } catch (Exception e) {
                    }
                }
            }
            setReporteGenerado(true);
            LOGGER.info("Fin");
        } else {
            LOGGER.info("jojojo");
            setReporteGenerado(false);
        }
    }

    public StreamedContent generarPdfReporte(String urlArchivo, String nombreArchivo) {
        StreamedContent resultado = null;
        //if (!isReporteGenerado()) {
            //LOGGER.info(urlArchivo);
            //LOGGER.info(nombreArchivo);
            ConexionBd connection = null;
            JasperReport reporteJasper = null;
            JasperPrint print = null;

            try {
                connection = new ConexionBd(ConexionBd.getJndi_Sid_Desarrollo());
                String reportName = "REPORTE-GRUPO-EMPRESA";
                reporteJasper = JasperCompileManager.compileReport(urlArchivo + nombreArchivo);
                print = JasperFillManager.fillReport(reporteJasper, null, connection.getConexion());
                JRExporter exporter = new JRPdfExporter();

                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                File temp = File.createTempFile(reportName, ".pdf");
                exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, new FileOutputStream(temp)); // your output goes here
                exporter.exportReport();

                //LOGGER.info(temp.getAbsolutePath());
                resultado = new DefaultStreamedContent(new FileInputStream(temp), "application/pdf");

            } catch (JRException e) {
                //LOGGER.warn(e);
                throw new RuntimeException("It's not possible to generate the pdf report.", e);
            } catch (FileNotFoundException e) {
                //LOGGER.warn(e);
                throw new RuntimeException("It's not possible to generate the pdf report.", e);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(ReporteGrupoEmpresa.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (connection != null) {
                    try {
                        connection.closeConexionBd();
                    } catch (Exception e) {
                    }
                }
            }
            //setReporteGenerado(true);
            //LOGGER.info("Fin");
            /*
        } else {
            LOGGER.info("jojojo");
            //setReporteGenerado(false);
        }*/
        return resultado;
    }

    public StreamedContent getContenido() {
        return contenido;
    }

    public void setContenido(StreamedContent contenido) {
        this.contenido = contenido;
    }

    public boolean isReporteGenerado() {
        return reporteGenerado;
    }

    public void setReporteGenerado(boolean reporteGenerado) {
        this.reporteGenerado = reporteGenerado;
    }

}
